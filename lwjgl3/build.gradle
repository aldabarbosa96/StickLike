//build.gradle  –  módulo :lwjgl3  (desktop)

plugins {
  id 'application'
  id 'io.github.fourlastor.construo' version '1.7.1'   //  ▲  actualizado
  id 'org.graalvm.buildtools.native' version '0.9.28' apply false
}

/* ───── aplica el plugin de GraalVM sólo si la propiedad está a true ─────── */
if (enableGraalNative?.toBoolean()) {
  apply plugin: 'org.graalvm.buildtools.native'
}

/* ─────────────────────  COMPILACIÓN: Java 17 con Toolchain  ─────────────── */
java {
  toolchain { languageVersion = JavaLanguageVersion.of(21) }
}

/* ─────────────────────  RECURSOS Y CLASE PRINCIPAL  ─────────────────────── */
sourceSets.main.resources.srcDirs += [rootProject.file('assets').path]

application {
  mainClass = 'com.sticklike.lwjgl3.Lwjgl3Launcher'
  applicationDefaultJvmArgs = ['-Xms512m', '-Xmx1024m',
                               '-XX:+UseG1GC',
                               '-XX:MaxGCPauseMillis=5',
                               '-XX:InitiatingHeapOccupancyPercent=30']
}

eclipse.project.name = "${appName}-lwjgl3"

/* ─────────────────────  DEPENDENCIAS  ────────────────────────────────────── */
dependencies {
  implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx-bullet-platform:$gdxVersion:natives-desktop"
  implementation "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion"

  implementation("com.badlogicgames.gdx:gdx-tools:$gdxVersion") {
    exclude group: 'com.badlogicgames.gdx', module: 'gdx-backend-lwjgl'
  }

  implementation project(':core')

  if (enableGraalNative?.toBoolean()) {
    implementation "io.github.berstanio:gdx-svmhelper-backend-lwjgl3:$graalHelperVersion"
    implementation "io.github.berstanio:gdx-svmhelper-extension-box2d:$graalHelperVersion"
    implementation "io.github.berstanio:gdx-svmhelper-extension-bullet:$graalHelperVersion"
    implementation "io.github.berstanio:gdx-svmhelper-extension-freetype:$graalHelperVersion"
  }
}

/* ─────────────────────  TAREA run (IDE)  ─────────────────────────────────── */
def os = System.properties['os.name'].toLowerCase()

tasks.named('run') {
  workingDir = rootProject.file('assets').path
  if (os.contains('mac')) jvmArgs += '-XstartOnFirstThread'
  jvmArgs += application.applicationDefaultJvmArgs
}

/* ─────────────────────  JAR FAT / auto-ejecutable  ───────────────────────── */
tasks.named('jar') {
  archiveFileName = "${appName}-${projectVersion}.jar"
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  dependsOn configurations.runtimeClasspath
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  exclude 'META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
  manifest.attributes 'Main-Class': application.mainClass
  doLast { archiveFile.get().asFile.setExecutable(true, false) }
}

/* Compatibilidad con gdx-setup */
tasks.register('dist') { dependsOn 'jar' }

/* -------------------------------------------------------------------------- */
/*                      EMPAQUETADOS NATIVOS  (CONSTRUO)                      */
/* -------------------------------------------------------------------------- */

import io.github.fourlastor.construo.Target

construo {
  name.set(appName)
  humanName.set(appName)
  version.set(projectVersion)

  targets.configure {
    /* ───────── Linux x64 ───────── */
    create('linuxX64', Target.Linux) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set('https://github.com/adoptium/temurin21-binaries/releases/download/' + 'jdk-21.0.2%2B13/OpenJDK21U-jdk_x64_linux_hotspot_21.0.2_13.tar.gz')
    }

    /* ───────── Windows x64 ─────── */
    create('winX64', Target.Windows) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set('https://github.com/adoptium/temurin21-binaries/releases/download/' + 'jdk-21.0.2%2B13/OpenJDK21U-jdk_x64_windows_hotspot_21.0.2_13.zip')
      // useConsole.set(true)
    }

    /* ───────── macOS Intel ─────── */
    create('macX64', Target.MacOs) {
      architecture.set(Target.Architecture.X86_64)
      identifier.set("com.sticklike.${appName}")
      jdkUrl.set('https://github.com/adoptium/temurin21-binaries/releases/download/' + 'jdk-21.0.2%2B13/OpenJDK21U-jdk_x64_mac_hotspot_21.0.2_13.tar.gz')
      macIcon.set(project.file('icons/logo.icns'))
    }

    /* ───────── macOS Apple Silicon ─ */
    create('macM1', Target.MacOs) {
      architecture.set(Target.Architecture.AARCH64)
      identifier.set("com.sticklike.${appName}")
      jdkUrl.set('https://github.com/adoptium/temurin21-binaries/releases/download/' + 'jdk-21.0.2%2B13/OpenJDK21U-jdk_aarch64_mac_hotspot_21.0.2_13.tar.gz')
      macIcon.set(project.file('icons/logo.icns'))
    }
  }
}

